leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(-69.233328, 45.250556, 1) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s, Maine</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s",
htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(-69.233328, 45.250556, 2) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s, Maine</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s",
htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(-69.233328, 45.250556, 1) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s, Maine</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s",
htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s, Maine</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s",
htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 2) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s, Maine</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s",
htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
netgear_ftp$matches$cpe
netgear_ftp$matches$port
netgear_ftp$matches$transport
netgear_ftp$matches$version
netgear_ftp$matches$shodan
netgear_ftp$matches$_shodan
netgear_ftp$matches$os
netgear_ftp$matches$or
netgear_ftp$matches$org
netgear_ftp$matches$domain
help("leaflet")
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 2) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude) %>%
addPopups(htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data))
netgear_ftp$matches$location
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 2) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude) %>%
addPopups(htmlEscape(org), htmlEscape(isp),
htmlEscape(title), htmlEscape(data))
addPopups(lng, lat)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 2) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude) %>%
addPopups(lng, lat)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 2) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude) %>%
addPopups(data=for_map, lng=~longitude , lat=~latitude)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude) %>%
addPopups(data=for_map, lng=~longitude , lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s, Maine</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s",
htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude , lat=~latitude) %>%
addPopups(data=for_map, lng=~longitude , lat=~latitude,
popup='WTF')
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s, Maine</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s",
htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~longitude)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=lng)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=org)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=org, city)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=org, data)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=org, location)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=org)
title
isp
org
ip
data
for_map <- as.data.table(netgear_ftp$matches$location,
ip=netgear_ftp$matches$ip,
isp=netgear_ftp$matches$isp,
title=netgear_ftp$matches$title,
org=netgear_ftp$matches$org,
data=netgear_ftp$matches$data,
stringsAsFactors=FALSE)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=org, data)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=org, isp)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=htmlEscape(org), htmlEscape(city), htmlEscape(isp))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=htmlEscape(org), htmlEscape(isp))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(isp)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(city), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 7) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(isp),
htmlEscape(title), htmlEscape(data)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 7) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(isp),
htmlEscape(title), htmlEscape(city)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(isp),
htmlEscape(title), htmlEscape(city)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(isp),
htmlEscape(title)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org),htmlEscape(title)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(title)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(76.157227, 15.326572, 10) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(-76.157227, 15.326572, 10) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(-76.157227, 15.326572, 2) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(-76.157227, 15.326572, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(40.4637, 3.7492, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
library(shodan)
library(data.table)
library(leaflet)
library(htmltools)
netgear_ftp <- shodan_search("NETGEAR ReadyNAS")
print(netgear_ftp$total)
print(nrow(netgear_ftp$matches))
print(colnames(netgear_ftp$matches))
for_map <- as.data.table(netgear_ftp$matches$location,
ip=netgear_ftp$matches$ip,
isp=netgear_ftp$matches$isp,
title=netgear_ftp$matches$title,
org=netgear_ftp$matches$org,
data=netgear_ftp$matches$data,
stringsAsFactors=FALSE)
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(40.4637, 3.7492, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(40.4637, 3.7492, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf("Internet accessible ReadyNAS", htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(40.4637, 3.7492, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf("<b>%s</b><br/>%s</b><br/>ISP: %s<br/><hr noshade size='1'/><pre>%s\n\n%s", htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(40.4637, 3.7492, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf("Internet accessible ReadyNAS<hr noshade size='1'/><pre>%s\n\n%s", htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(40.4637, 3.7492, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org)))
leaflet(for_map, width="600", height="600") %>%
addTiles() %>%
setView(40.4637, 3.7492, 1) %>%
addCircles(data=for_map, lng=~longitude, lat=~latitude,
popup=~sprintf(htmlEscape(org), htmlEscape(isp)))
devtools::install_github('rstudio/blogdown')
install.packages('blogdown')
install.packages(c("broom", "dbplyr", "dplyr", "evaluate", "ggplot2", "git2r", "glue", "openssl", "pillar", "Rcpp", "RcppArmadillo", "stringi", "tinytex", "xts", "yaml", "zoo"))
install.packages("stringi")
library("HIBPwned")
library("HIBPwned")
install.packages("HIBPwned")
library("HIBPwned")
pastes("wei.sos.wa.gov")
account_breaches(c("rmcree@yahoo.com","holisticinfosec@gmail.com","russ@holisticinfosec.org"))
account_breaches("wei.sos.wa.gov")
account_breaches("sos.wa.gov")
account_breaches("wa.gov")
# Elections
account_breaches("heidih@co.adams.wa.us,dmckay@co.asotin.wa.us,elections@co.benton.wa.us,elections.ballots@co.chelan.wa.us,auditor@co.clallam.wa.us,elections@clark.wa.gov,sharon_richter@co.columbia.wa.us,elections@co.cowlitz.wa.us,elections@co.douglas.wa.us,delections@co.ferry.wa.us,elections@co.franklin.wa.us,ddeal@co.garfield.wa.us,elections@co.grant.wa.us,elections@co.grays-harbor.wa.us,elections@co.island.wa.us,elections@co.jefferson.wa.us,elections@kingcounty.gov,auditor@co.kitsap.wa.us,elections@co.kittitas.wa.us,voting@klickitatcounty.org,elections@lewiscountywa.gov,sjohnston@co.lincoln.wa.us,elections@co.mason.wa.us,elections@co.okanogan.wa.us,jkidd@co.pacific.wa.us,elections@pendoreille.org,pcelections@piercecountywa.gov,elections@sanjuanco.com,scelections@co.skagit.wa.us,elections@co.skamania.wa.us,elections@snoco.org,elections@spokanecounty.org,elections@co.stevens.wa.us,elections@co.thurston.wa.us,bergsengn@co.wahkiakum.wa.us,elections@co.walla-walla.wa.us,elections@co.whatcom.wa.us,elections@co.whitman.wa.us ,iVote@co.yakima.wa.us")
account_breaches("heidih@co.adams.wa.us","dmckay@co.asotin.wa.us","elections@co.benton.wa.us","elections.ballots@co.chelan.wa.us","auditor@co.clallam.wa.us","elections@clark.wa.gov","sharon_richter@co.columbia.wa.us","elections@co.cowlitz.wa.us","elections@co.douglas.wa.us","delections@co.ferry.wa.us","elections@co.franklin.wa.us","ddeal@co.garfield.wa.us","elections@co.grant.wa.us","elections@co.grays-harbor.wa.us","elections@co.island.wa.us","elections@co.jefferson.wa.us","elections@kingcounty.gov","auditor@co.kitsap.wa.us","elections@co.kittitas.wa.us","voting@klickitatcounty.org","elections@lewiscountywa.gov","sjohnston@co.lincoln.wa.us","elections@co.mason.wa.us","elections@co.okanogan.wa.us","jkidd@co.pacific.wa.us","elections@pendoreille.org","pcelections@piercecountywa.gov","elections@sanjuanco.com","scelections@co.skagit.wa.us","elections@co.skamania.wa.us","elections@snoco.org","elections@spokanecounty.org","elections@co.stevens.wa.us","elections@co.thurston.wa.us","bergsengn@co.wahkiakum.wa.us","elections@co.walla-walla.wa.us","elections@co.whatcom.wa.us","elections@co.whitman.wa.us","iVote@co.yakima.wa.us")
account_breaches("heidih@co.adams.wa.us","dmckay@co.asotin.wa.us","elections@co.benton.wa.us","elections.ballots@co.chelan.wa.us","auditor@co.clallam.wa.us","elections@clark.wa.gov","sharon_richter@co.columbia.wa.us","elections@co.cowlitz.wa.us","elections@co.douglas.wa.us","delections@co.ferry.wa.us")
account_breaches("heidih@co.adams.wa.us")
account_breaches
account_breaches("heidih@co.adams.wa.us")
account_breaches("dmckay@co.asotin.wa.us")
account_breaches("elections@co.benton.wa.us")
account_breaches("elections.ballots@co.chelan.wa.us")
account_breaches("auditor@co.clallam.wa.us")
account_breaches("elections@clark.wa.gov")
account_breaches("sharon_richter@co.columbia.wa.us")
account_breaches("elections@co.cowlitz.wa.us")
account_breaches("elections@co.douglas.wa.us")
account_breaches("delections@co.ferry.wa.us")
account_breaches("elections@co.franklin.wa.us")
account_breaches("ddeal@co.garfield.wa.us")
breached_site("Exactis")
account_breaches("heidih@co.adams.wa.us")
account_breaches("dmckay@co.asotin.wa.us")
account_breaches("elections@co.benton.wa.us")
account_breaches("elections.ballots@co.chelan.wa.us")
account_breaches("auditor@co.clallam.wa.us")
account_breaches("elections@clark.wa.gov")
account_breaches("sharon_richter@co.columbia.wa.us")
account_breaches("elections@co.cowlitz.wa.us")
account_breaches("elections@co.douglas.wa.us")
account_breaches("delections@co.ferry.wa.us")
account_breaches("heidih@co.adams.wa.us")
account_breaches("dmckay@co.asotin.wa.us")
account_breaches("elections@co.benton.wa.us")
account_breaches("elections.ballots@co.chelan.wa.us")
account_breaches("auditor@co.clallam.wa.us")
account_breaches("heidih@co.adams.wa.us")
account_breaches("dmckay@co.asotin.wa.us")
account_breaches("elections@co.benton.wa.us")
account_breaches("elections.ballots@co.chelan.wa.us")
account_breaches("auditor@co.clallam.wa.us")
account_breaches("elections@clark.wa.gov")
account_breaches("sharon_richter@co.columbia.wa.us")
account_breaches("elections@co.cowlitz.wa.us")
account_breaches("elections@co.douglas.wa.us")
account_breaches("delections@co.ferry.wa.us")
account_breaches("elections@co.franklin.wa.us")
account_breaches("ddeal@co.garfield.wa.us")
account_breaches("elections@co.grant.wa.us")
account_breaches("elections@co.grays-harbor.wa.us")
account_breaches("elections@co.island.wa.us")
account_breaches("elections@co.jefferson.wa.us")
account_breaches("elections@kingcounty.gov")
account_breaches("auditor@co.kitsap.wa.us")
account_breaches("elections@co.franklin.wa.us")
account_breaches("ddeal@co.garfield.wa.us")
account_breaches("elections@co.grant.wa.us")
account_breaches("elections@co.grays-harbor.wa.us")
account_breaches("elections@co.island.wa.us")
account_breaches("elections@co.jefferson.wa.us")
account_breaches("elections@kingcounty.gov")
account_breaches("auditor@co.kitsap.wa.us")
account_breaches("elections@co.kittitas.wa.us")
account_breaches("voting@klickitatcounty.org")
account_breaches("elections@co.franklin.wa.us")
account_breaches("ddeal@co.garfield.wa.us")
account_breaches("elections@co.grant.wa.us")
account_breaches("elections@co.grays-harbor.wa.us")
account_breaches("elections@co.island.wa.us")
account_breaches("elections@co.jefferson.wa.us")
account_breaches("elections@kingcounty.gov")
account_breaches("auditor@co.kitsap.wa.us")
account_breaches("elections@co.kittitas.wa.us")
account_breaches("voting@klickitatcounty.org")
account_breaches("elections@lewiscountywa.gov")
account_breaches("sjohnston@co.lincoln.wa.us")
account_breaches("elections@co.mason.wa.us")
account_breaches("voting@klickitatcounty.org")
account_breaches("elections@lewiscountywa.gov")
account_breaches("sjohnston@co.lincoln.wa.us")
account_breaches("elections@co.mason.wa.us")
account_breaches("elections@co.okanogan.wa.us")
account_breaches("jkidd@co.pacific.wa.us")
account_breaches("elections@pendoreille.org")
account_breaches("auditor@co.kitsap.wa.us")
account_breaches("elections@co.kittitas.wa.us")
account_breaches("voting@klickitatcounty.org")
account_breaches("elections@lewiscountywa.gov")
account_breaches("sjohnston@co.lincoln.wa.us")
account_breaches("elections@co.mason.wa.us")
account_breaches("elections@co.mason.wa.us")
account_breaches("elections@co.mason.wa.us")
help("HIBPwned")
help("account_breaches")
library("HIBPwned")
help("account_breaches")
help("HIBPwned")
pastes()
pastes
breached_site
#' Used to extract content from a GET request and collapse to a data.frame
#' @description It calls a helper function that retries up to 6 times
#'
#' @param URLS urls
#' @param headers headers as built by HIBP_headers()
#' @inheritParams data_classes
#'
#' @return data.frame
.GETcontent <- function(URLS, headers, verbose) {# nolint
output <- get_and_retry(URLS, headers, verbose)
try_number <- 1
while (is.null(output) && try_number < 6) {
try_number <- try_number + 1
if (verbose){
message(paste0("Try number ", try_number))
if (try_number == 6){
message("This is the last try, if it fails will return NULL") # nolint
}
}
Sys.sleep(2 ^ try_number)
output <- get_and_retry(URLS, headers, verbose)
}
return(output)
}
GETcontent <- memoise::memoise(.GETcontent)
crul_get <- function(url, headers){
crul::HttpClient$new(url = url,
headers = headers)$get()
}
get <- ratelimitr::limit_rate(
crul_get,
ratelimitr::rate(n = 1, period = 1.6)
)
get_and_retry <- function(url, headers, verbose) {# nolint
resp <- get(url, headers)
code <- resp$status_code
content <- resp$parse(encoding = "UTF-8")
if (code > 200){
# this will happen when no result
if (code == 404){
res <- data.frame(Name = NA)
}else{
# this is more problematic and we shall try again
if (verbose){
message(paste("http error code:", code))
}
res <- NULL
}
}
if (code == 200) res <- jsonlite::fromJSON(content)
return(res)
}
pwned_passwords <- function(
hashes
, verbose = TRUE
, agent = NULL) {
require(data.table)
if (length(hashes) == 0 | !inherits(hashes, "character")){
stop("Problematic hashes")
}
res <- lapply(hashes, function(x) {
dt_hash <-
setorder(
setkey(
data.table(
raw = readLines(paste0("https://api.pwnedpasswords.com/range/", x), warn = FALSE)
, key = "raw")
[,c("hash", "n") := tstrsplit(raw, ":", fixed=TRUE)]
[, `:=`(count = as.numeric(n)
, hashcode = x) ]
[,-c("raw", "n")]
, "hash")
, -"count")
return(dt_hash)
})
return(res)
} # End Function
pwned_passwords("21BD1")
install.packages("data.table")
pwned_passwords("21BD1")
blogdown::serve_site()
pwned_passwords <- function(
hashes
, verbose = TRUE
, agent = NULL) {
if (length(hashes) == 0 | !inherits(hashes, "character")){
stop("Problematic hashes")
}
encoded <- urltools::url_encode(hashes)
URLS <- paste0(# nolint
"https://api.pwnedpasswords.com/range/"
, encoded
)
res <- lapply(URLS, GETcontent, HIBP_headers(agent), verbose)# nolint
names(res) <- hashes
return(res)
}
pwned_passwords("21BD1")
library("HIBPwned")
pwned_passwords("21BD1")
shiny::runApp('apps/scratch')
runApp('apps/scratch')
runApp('apps/scratch')
runApp('apps/scratch')
runApp('apps/scratch')
runApp()
runApp('apps/scratch')
runApp()
runApp('apps/scratch')
